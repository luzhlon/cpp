/////////////////////////////////////////////////////////////////////////////
// Name:        mysqldlg.cpp
// Purpose:     
// Author:      CodeSoul
// Modified by: 
// Created:     02/06/2015 20:35:16
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 02/06/2015 20:35:16

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "mysqldlg.h"

////@begin XPM images
////@end XPM images


/*
 * MySqlDlg type definition
 */

IMPLEMENT_DYNAMIC_CLASS( MySqlDlg, wxDialog )


/*
 * MySqlDlg event table definition
 */

BEGIN_EVENT_TABLE( MySqlDlg, wxDialog )

////@begin MySqlDlg event table entries
    EVT_CLOSE( MySqlDlg::OnCloseWindow )
    EVT_BUTTON( ID_BTN_CONNECT_MYSQL, MySqlDlg::OnBtnConnectMysqlClick )
    EVT_BUTTON( ID_BUT_EXEC, MySqlDlg::OnButExecClick )
    EVT_BUTTON( ID_BUT_CONF, MySqlDlg::OnButConfClick )
////@end MySqlDlg event table entries

END_EVENT_TABLE()


/*
 * MySqlDlg constructors
 */

MySqlDlg::MySqlDlg()
{
    Init();
}

MySqlDlg::MySqlDlg( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*
 * MySqlDlg creator
 */

bool MySqlDlg::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin MySqlDlg creation
    SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY|wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end MySqlDlg creation

    return true;
}


/*
 * MySqlDlg destructor
 */

MySqlDlg::~MySqlDlg()
{
////@begin MySqlDlg destruction
////@end MySqlDlg destruction
}


/*
 * Member initialisation
 */

void MySqlDlg::Init()
{
////@begin MySqlDlg member initialisation
    m_txResult = NULL;
    m_txSql = NULL;
    m_btnConnect = NULL;
    m_btnExec = NULL;
    m_btnConf = NULL;
    m_paneConf = NULL;
    m_server = NULL;
    m_txUser = NULL;
    m_txPort = NULL;
    m_txPasswd = NULL;
////@end MySqlDlg member initialisation
}


/*
 * Control creation for MySqlDlg
 */

void MySqlDlg::CreateControls()
{    
////@begin MySqlDlg content construction
    // Generated by DialogBlocks, 04/06/2015 12:16:56 (unregistered)

    MySqlDlg* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    m_txResult = new wxTextCtrl( itemDialog1, ID_TEXT_RESULT, wxEmptyString, wxDefaultPosition, wxSize(500, 300), wxTE_MULTILINE|wxHSCROLL );
    itemBoxSizer2->Add(m_txResult, 0, wxGROW|wxALL, 5);

    m_txSql = new wxTextCtrl( itemDialog1, ID_TEXT_SQL, wxEmptyString, wxDefaultPosition, wxSize(500, 50), wxTE_MULTILINE );
    itemBoxSizer2->Add(m_txSql, 0, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer5, 0, wxGROW|wxALL, 5);

    itemBoxSizer5->Add(5, 5, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_btnConnect = new wxButton( itemDialog1, ID_BTN_CONNECT_MYSQL, _("Connect"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(m_btnConnect, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_btnExec = new wxButton( itemDialog1, ID_BUT_EXEC, _("Ex&ecute"), wxDefaultPosition, wxDefaultSize, 0 );
    m_btnExec->SetDefault();
    itemBoxSizer5->Add(m_btnExec, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_btnConf = new wxButton( itemDialog1, ID_BUT_CONF, _("Config ..."), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(m_btnConf, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_paneConf = new wxPanel( itemDialog1, ID_PANEL_CONFIG, wxDefaultPosition, wxDefaultSize, wxRAISED_BORDER|wxTAB_TRAVERSAL );
    m_paneConf->SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    itemBoxSizer2->Add(m_paneConf, 0, wxGROW|wxALL, 5);

    wxGridSizer* itemGridSizer11 = new wxGridSizer(2, 4, 0, 0);
    m_paneConf->SetSizer(itemGridSizer11);

    wxStaticText* itemStaticText12 = new wxStaticText( m_paneConf, wxID_STATIC, _("Server:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemGridSizer11->Add(itemStaticText12, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_server = new wxTextCtrl( m_paneConf, ID_TEXT_SERVER, _("localhost"), wxDefaultPosition, wxDefaultSize, 0 );
    itemGridSizer11->Add(m_server, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText14 = new wxStaticText( m_paneConf, wxID_STATIC, _("User:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemGridSizer11->Add(itemStaticText14, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_txUser = new wxTextCtrl( m_paneConf, ID_TEXT_USER, _("root"), wxDefaultPosition, wxDefaultSize, 0 );
    itemGridSizer11->Add(m_txUser, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText16 = new wxStaticText( m_paneConf, wxID_STATIC, _("Port:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemGridSizer11->Add(itemStaticText16, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_txPort = new wxTextCtrl( m_paneConf, ID_TEXT_PORT, _("3306"), wxDefaultPosition, wxDefaultSize, 0 );
    itemGridSizer11->Add(m_txPort, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText18 = new wxStaticText( m_paneConf, wxID_STATIC, _("Password:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemGridSizer11->Add(itemStaticText18, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_txPasswd = new wxTextCtrl( m_paneConf, ID_TEXT_PASSWD, _("12345"), wxDefaultPosition, wxDefaultSize, wxTE_PASSWORD );
    itemGridSizer11->Add(m_txPasswd, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end MySqlDlg content construction
}


/*
 * Should we show tooltips?
 */

bool MySqlDlg::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap MySqlDlg::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin MySqlDlg bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end MySqlDlg bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon MySqlDlg::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin MySqlDlg icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end MySqlDlg icon retrieval
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BTN_CONNECT_MYSQL
 */

void MySqlDlg::OnBtnConnectMysqlClick( wxCommandEvent& event )
{
	long port = 0;
	if (!m_txPort->GetValue().ToLong(&port))
	{
		wxMessageBox("Invalid port.");
		return;
	}
	if (!m_mysql.Connect(m_server->GetValue().mb_str(),
		m_txUser->GetValue().mb_str(), m_txPasswd->GetValue().mb_str(), NULL, port))
	{
		wxMessageBox(wxString::Format("Connect failure. %s", m_mysql.Error()));
		return;
	}
	m_txResult->AppendText("//Connect success.\n");

////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BTN_CONNECT_MYSQL in MySqlDlg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BTN_CONNECT_MYSQL in MySqlDlg. 
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUT_EXEC
 */

void MySqlDlg::OnButExecClick( wxCommandEvent& event )
{
	if (!m_mysql.CheckConnect())
	{
		wxMessageBox("Not connect to a server;");
		return;
	}
	if (!m_mysql.Query((const char *)m_txSql->GetValue().c_str()))
	{
		wxMessageBox("Query error.");
		return;
	}
	MySql_RES res(&m_mysql);
	if (res.IsNull())
	{
		m_txResult->AppendText("[No result]\n");
		m_txResult->AppendText(m_mysql.Info());
		m_txResult->AppendText("\n");
		return;
	}
	MYSQL_ROW row;
	unsigned int num_fields;

	num_fields = res.FieldNum();
	MYSQL_FIELD *fields = res.Fields();
	//Print the fields name
	for (int i = 0; i < num_fields; i++)
		m_txResult->AppendText(wxString::Format("%s\t", fields[i].name));
	m_txResult->AppendText("\n");
	while ((row = res.FetchRow()))
	{
		//unsigned long *lengths = res.FetchLengths();
		for (int i = 0; i < num_fields; i++)
		{
			m_txResult->AppendText(wxString::Format("[%s]\t", row[i]));
		}
		m_txResult->AppendText("\n");
	}
	m_txResult->AppendText(m_mysql.Info());
	m_txResult->AppendText("\n");
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUT_EXEC in MySqlDlg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUT_EXEC in MySqlDlg. 
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUT_CONF
 */

void MySqlDlg::OnButConfClick( wxCommandEvent& event )
{
	if (m_paneConf->IsShown())
		m_paneConf->Show(false);
	else
		m_paneConf->Show();
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUT_CONF in MySqlDlg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUT_CONF in MySqlDlg. 
}


/*
 * wxEVT_CLOSE_WINDOW event handler for ID_MYSQLDLG
 */

void MySqlDlg::OnCloseWindow( wxCloseEvent& event )
{
////@begin wxEVT_CLOSE_WINDOW event handler for ID_MYSQLDLG in MySqlDlg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_CLOSE_WINDOW event handler for ID_MYSQLDLG in MySqlDlg. 
}

