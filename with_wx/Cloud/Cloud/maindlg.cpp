/////////////////////////////////////////////////////////////////////////////
// Name:        maindlg.cpp
// Purpose:     
// Author:      CodeSoul
// Modified by: 
// Created:     28/05/2015 02:26:07
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 28/05/2015 02:26:07

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "maindlg.h"
#include "mysqldlg.h"
#include "connectmanagerdlg.h"
#include "cloudapp.h"


////@begin XPM images
////@end XPM images


/*
 * MainDlg type definition
 */

IMPLEMENT_DYNAMIC_CLASS( MainDlg, wxDialog )


/*
 * MainDlg event table definition
 */

BEGIN_EVENT_TABLE( MainDlg, wxDialog )

////@begin MainDlg event table entries
    EVT_INIT_DIALOG( MainDlg::OnInitDialog )
    EVT_CLOSE( MainDlg::OnCloseWindow )
    EVT_BUTTON( ID_BTN_LISTEN, MainDlg::OnBtnListenClick )
    EVT_BUTTON( ID_BTN_MANAGER, MainDlg::OnBtnManagerClick )
    EVT_BUTTON( ID_BUT_MYSQL, MainDlg::OnButMysqlClick )
////@end MainDlg event table entries

END_EVENT_TABLE()


/*
 * MainDlg constructors
 */

MainDlg::MainDlg()
{
    Init();
}

MainDlg::MainDlg( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}

/*
 * MainDlg creator
 */

bool MainDlg::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin MainDlg creation
    SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY|wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end MainDlg creation
	wxLog::SetLogLevel(wxLOG_Message);
	wxLog::SetActiveTarget(new wxLogTextCtrl(m_txLog));
    return true;
}


/*
 * MainDlg destructor
 */

MainDlg::~MainDlg()
{
////@begin MainDlg destruction
////@end MainDlg destruction
}


/*
 * Member initialisation
 */

void MainDlg::Init()
{
////@begin MainDlg member initialisation
    m_btnListen = NULL;
    m_manager = NULL;
#if defined(__WXMSW__)
    m_txPort = NULL;
#endif
    m_txLog = NULL;
    m_btnMySql = NULL;
////@end MainDlg member initialisation
}


/*
 * Control creation for MainDlg
 */

void MainDlg::CreateControls()
{    
////@begin MainDlg content construction
    // Generated by DialogBlocks, 04/06/2015 01:25:18 (unregistered)

    MainDlg* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 0, wxGROW|wxALL, 5);

    m_btnListen = new wxButton( itemDialog1, ID_BTN_LISTEN, _("Listen&&Accept"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(m_btnListen, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_manager = new wxButton( itemDialog1, ID_BTN_MANAGER, _("ManageConnect"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(m_manager, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemBoxSizer3->Add(30, 5, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText7 = new wxStaticText( itemDialog1, wxID_STATIC, _("Port"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

#if defined(__WXMSW__)
    m_txPort = new wxTextCtrl( itemDialog1, ID_TEXT_PORT, _("4320"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(m_txPort, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

#endif

    m_txLog = new wxTextCtrl( itemDialog1, ID_TEXT_LOG, wxEmptyString, wxDefaultPosition, wxSize(520, 380), wxTE_MULTILINE );
    itemBoxSizer2->Add(m_txLog, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer10 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer10, 0, wxGROW|wxALL, 5);

    itemBoxSizer10->Add(5, 5, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_btnMySql = new wxButton( itemDialog1, ID_BUT_MYSQL, _("MySql"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer10->Add(m_btnMySql, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end MainDlg content construction
}


/*
 * Should we show tooltips?
 */

bool MainDlg::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap MainDlg::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin MainDlg bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end MainDlg bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon MainDlg::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin MainDlg icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end MainDlg icon retrieval
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BTN_CONNECT
 */

void MainDlg::StartListen()
{
	static ThreadListen *lisThread = NULL;
	if (lisThread) return;
	long port = 0;
	if (!m_txPort->GetValue().ToLong(&port))
	{
		wxLogMessage("Port is not a valid number.");
		return;
	}
	(new ThreadListen(port))->Run();
}

wxThread::ExitCode ThreadListen::Entry()
{
	wxLogMessage("Listening ...... ");
	wxIPV4address addr;
	//addr.Hostname("127.0.0.1");
	addr.Service(m_port);
	wxSocketServer *server = new wxSocketServer(addr);
	while (true)
	{
		wxSocketBase* connect = server->Accept();
		if (connect)
		{
			wxIPV4address ipAddr;
			connect->GetPeer(ipAddr);
			wxLogMessage("Accept a connect:%s %d  Prepare to recv message...", ipAddr.Hostname(), ipAddr.Service());
			(new ThreadConnect(connect))->Run();
		}
		Sleep(300);
	}

EXIT_RETURN:
	delete server;
	Delete();
	return 0;
}

int ThreadConnect::MAX_LENGTH = 10240;
wxCriticalSection ThreadConnect::CriSec;

ThreadConnect::~ThreadConnect()
{
	OnExit();
}

void ThreadConnect::OnExit()
{
	if (!m_buf) return;//防止多次调用
	delete m_buf;//删除缓冲区
	m_buf = NULL;
	CriSec.Enter();
		wxGetApp().m_cntList.DeleteObject(this);//将自己移出到链表
	CriSec.Leave();
	m_connect->Close();
	delete m_connect;
}

wxThread::ExitCode ThreadConnect::Entry()
{
	wxIPV4address ipAddr;
	m_buf = new char[MAX_LENGTH];//分配缓冲区
	memset(m_buf, 0, MAX_LENGTH);
	CriSec.Enter();
		wxGetApp().m_cntList.Append(this);//将自己添加到链表中
	CriSec.Leave();
	m_connect->GetPeer(ipAddr);//获得对方Socket的地址
	while (true)
	{
		m_connect->Read(m_buf, 1024);
		if (m_connect->Error())
		{
			if (m_connect->IsDisconnected())
			{
				wxLogMessage("Connect is closed. %s %d", ipAddr.IPAddress(), ipAddr.Service());
				break;
			}
		}
		else
		{
			wxLogMessage("Receive a message: %s %s %d", m_buf, ipAddr.IPAddress(), ipAddr.Service());
		}
	}
	//OnExit();线程退出后会调用析构函数，如果调用了再次就出错
	return 0;
}

void MainDlg::OnBtnListenClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BTN_CONNECT in MainDlg.
    // Before editing this code, remove the block markers.
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BTN_CONNECT in MainDlg. 
}


/*
 * wxEVT_INIT_DIALOG event handler for ID_MAINDLG
 */

void MainDlg::OnInitDialog( wxInitDialogEvent& event )
{
	StartListen();
////@begin wxEVT_INIT_DIALOG event handler for ID_MAINDLG in MainDlg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_INIT_DIALOG event handler for ID_MAINDLG in MainDlg. 
}


/*
 * wxEVT_CLOSE_WINDOW event handler for ID_MAINDLG
 */

void MainDlg::OnCloseWindow( wxCloseEvent& event )
{
    //wxMessageBox(_("Close Dialog."));
	event.Skip();
////@begin wxEVT_CLOSE_WINDOW event handler for ID_MAINDLG in MainDlg.
    // Before editing this code, remove the block markers.
////@end wxEVT_CLOSE_WINDOW event handler for ID_MAINDLG in MainDlg. 
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BTN_MANAGER
 */

void MainDlg::OnBtnManagerClick( wxCommandEvent& event )
{
	ConnectManagerDlg *dlg = new ConnectManagerDlg(this);
	dlg->ShowModal();
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BTN_MANAGER in MainDlg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BTN_MANAGER in MainDlg. 
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUT_MYSQL
 */

void MainDlg::OnButMysqlClick( wxCommandEvent& event )
{
	MySqlDlg *dlg = new MySqlDlg(this);
	dlg->Show();
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUT_MYSQL in MainDlg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUT_MYSQL in MainDlg. 
}

